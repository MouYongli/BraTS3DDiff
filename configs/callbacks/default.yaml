#save_predicted_masks:
#  _target_: src.callbacks.predicted_masks_save_callback.MultipleMasksSaveCallBack
#  save_dir: ${hydra:runtime.output_dir}/seg_masks

synapse_submission:
  _target_: src.callbacks.synapse_submission_callback.SynapseSubmissionCallBack
  auth_file: ${synapse.auth_file}
  syn_proj_id: ${synapse.syn_proj_id}
  pred_labels_path: ${hydra:runtime.output_dir}/seg_masks/res=16
  eval_images_path: ${data.data_dir}/test
  syn_eval_id: '9615339'
  zip_file_name: ${task_tag}_${now:%Y-%m-%d}_${now:%H-%M-%S}
  name: ${.zip_file_name}

rich_progress_bar:
  _target_: lightning.pytorch.callbacks.RichProgressBar

model_summary:
  max_depth: -1

learningrate_monitor:
  _target_: lightning.pytorch.callbacks.LearningRateMonitor
  logging_interval: step # the interval at which to log the learning rate
  log_momentum: False # whether to log the momentum

model_checkpoint:
  _target_: lightning.pytorch.callbacks.ModelCheckpoint
  monitor: val/dice
  mode: "max"
  save_top_k: 3
  ## This must be mutually exclusive with train_time_interval and every_n_epochs.
  # every_n_train_steps: 200
  ## check every n epochs. This must be mutually exclusive with every_n_train_steps and train_time_interval.
  every_n_epochs: ${trainer.check_val_every_n_epoch}
  save_on_train_epoch_end: True